
TESTIN_AUK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800039c  080003a4  000103a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800039c  0800039c  000103a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800039c  0800039c  000103a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800039c  080003a4  000103a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800039c  0800039c  0001039c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003a0  080003a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103a4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000103a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000105  00000000  00000000  000103ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000ad  00000000  00000000  000104d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00010580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000060  00000000  00000000  000105f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000abf  00000000  00000000  00010658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000001b6  00000000  00000000  00011117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002e62  00000000  00000000  000112cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001412f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000128  00000000  00000000  00014180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000384 	.word	0x08000384

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000384 	.word	0x08000384

080001e8 <init_leds>:
#define gpiodOdr *((unsigned volatile int *) 0x40020c14)
#define gpiodP14onmask 1<<14
#define gpiodP14ofmask 0<<14
#define gpiodP12onmask 1<<12
#define gpiodP12ofmask ~(1<<12)
void init_leds(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	rccahblenR =gpiodmask;
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <init_leds+0x28>)
 80001ee:	2208      	movs	r2, #8
 80001f0:	601a      	str	r2, [r3, #0]
		gpiodModr=gpiodP14mask;
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <init_leds+0x2c>)
 80001f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80001f8:	601a      	str	r2, [r3, #0]
		gpiodModr |=gpiodP12mask;
 80001fa:	4b06      	ldr	r3, [pc, #24]	; (8000214 <init_leds+0x2c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a05      	ldr	r2, [pc, #20]	; (8000214 <init_leds+0x2c>)
 8000200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000204:	6013      	str	r3, [r2, #0]
}
 8000206:	bf00      	nop
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	40023830 	.word	0x40023830
 8000214:	40020c00 	.word	0x40020c00

08000218 <turn_alpumut_on>:
void turn_alpumut_on(){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	gpiodOdr=gpiodP14onmask;
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <turn_alpumut_on+0x14>)
 800021e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000222:	601a      	str	r2, [r3, #0]
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	40020c14 	.word	0x40020c14

08000230 <turn_konyali_on>:
void turn_konyali_on(){
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	gpiodOdr |=gpiodP12onmask;
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <turn_konyali_on+0x18>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a03      	ldr	r2, [pc, #12]	; (8000248 <turn_konyali_on+0x18>)
 800023a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800023e:	6013      	str	r3, [r2, #0]
}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr
 8000248:	40020c14 	.word	0x40020c14

0800024c <turn_alpumut_off>:
void turn_alpumut_off(){
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
	gpiodOdr&=gpiodP14ofmask;
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <turn_alpumut_off+0x18>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4b03      	ldr	r3, [pc, #12]	; (8000264 <turn_alpumut_off+0x18>)
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
}
 800025a:	bf00      	nop
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40020c14 	.word	0x40020c14

08000268 <turn_konyali_off>:
void turn_konyali_off(){
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	gpiodOdr&=gpiodP12ofmask;
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <turn_konyali_off+0x18>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a03      	ldr	r2, [pc, #12]	; (8000280 <turn_konyali_off+0x18>)
 8000272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000276:	6013      	str	r3, [r2, #0]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	40020c14 	.word	0x40020c14

08000284 <delayy>:
void delayy(){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
	int  delay0 = 0x0FFFFFFF;
 800028a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800028e:	607b      	str	r3, [r7, #4]
	while (delay0--){
 8000290:	bf00      	nop
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	1e5a      	subs	r2, r3, #1
 8000296:	607a      	str	r2, [r7, #4]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d1fa      	bne.n	8000292 <delayy+0xe>
		}
}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <main>:

int main () {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
	//Since there are 7 letters in my name and surname, I took all the functions together.
  //  name: alpumut surname:konyali
	init_leds();
 80002ae:	f7ff ff9b 	bl	80001e8 <init_leds>
	for(int i =1;i<=7;i++){
 80002b2:	2301      	movs	r3, #1
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	e00e      	b.n	80002d6 <main+0x2e>
		turn_alpumut_on();
 80002b8:	f7ff ffae 	bl	8000218 <turn_alpumut_on>
	delayy();
 80002bc:	f7ff ffe2 	bl	8000284 <delayy>
	    turn_alpumut_off();
 80002c0:	f7ff ffc4 	bl	800024c <turn_alpumut_off>
	    turn_konyali_on();
 80002c4:	f7ff ffb4 	bl	8000230 <turn_konyali_on>
	delayy();
 80002c8:	f7ff ffdc 	bl	8000284 <delayy>
	    turn_konyali_off();
 80002cc:	f7ff ffcc 	bl	8000268 <turn_konyali_off>
	for(int i =1;i<=7;i++){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3301      	adds	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2b07      	cmp	r3, #7
 80002da:	dded      	ble.n	80002b8 <main+0x10>

	}

	return 0;
 80002dc:	2300      	movs	r3, #0
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e8:	480d      	ldr	r0, [pc, #52]	; (8000320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f0:	480c      	ldr	r0, [pc, #48]	; (8000324 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f2:	490d      	ldr	r1, [pc, #52]	; (8000328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f4:	4a0d      	ldr	r2, [pc, #52]	; (800032c <LoopForever+0xe>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000308:	4c0a      	ldr	r4, [pc, #40]	; (8000334 <LoopForever+0x16>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000316:	f000 f811 	bl	800033c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031a:	f7ff ffc5 	bl	80002a8 <main>

0800031e <LoopForever>:

LoopForever:
    b LoopForever
 800031e:	e7fe      	b.n	800031e <LoopForever>
  ldr   r0, =_estack
 8000320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800032c:	080003a4 	.word	0x080003a4
  ldr r2, =_sbss
 8000330:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000334:	2000001c 	.word	0x2000001c

08000338 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC_IRQHandler>
	...

0800033c <__libc_init_array>:
 800033c:	b570      	push	{r4, r5, r6, lr}
 800033e:	4d0d      	ldr	r5, [pc, #52]	; (8000374 <__libc_init_array+0x38>)
 8000340:	4c0d      	ldr	r4, [pc, #52]	; (8000378 <__libc_init_array+0x3c>)
 8000342:	1b64      	subs	r4, r4, r5
 8000344:	10a4      	asrs	r4, r4, #2
 8000346:	2600      	movs	r6, #0
 8000348:	42a6      	cmp	r6, r4
 800034a:	d109      	bne.n	8000360 <__libc_init_array+0x24>
 800034c:	4d0b      	ldr	r5, [pc, #44]	; (800037c <__libc_init_array+0x40>)
 800034e:	4c0c      	ldr	r4, [pc, #48]	; (8000380 <__libc_init_array+0x44>)
 8000350:	f000 f818 	bl	8000384 <_init>
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	10a4      	asrs	r4, r4, #2
 8000358:	2600      	movs	r6, #0
 800035a:	42a6      	cmp	r6, r4
 800035c:	d105      	bne.n	800036a <__libc_init_array+0x2e>
 800035e:	bd70      	pop	{r4, r5, r6, pc}
 8000360:	f855 3b04 	ldr.w	r3, [r5], #4
 8000364:	4798      	blx	r3
 8000366:	3601      	adds	r6, #1
 8000368:	e7ee      	b.n	8000348 <__libc_init_array+0xc>
 800036a:	f855 3b04 	ldr.w	r3, [r5], #4
 800036e:	4798      	blx	r3
 8000370:	3601      	adds	r6, #1
 8000372:	e7f2      	b.n	800035a <__libc_init_array+0x1e>
 8000374:	0800039c 	.word	0x0800039c
 8000378:	0800039c 	.word	0x0800039c
 800037c:	0800039c 	.word	0x0800039c
 8000380:	080003a0 	.word	0x080003a0

08000384 <_init>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr

08000390 <_fini>:
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000392:	bf00      	nop
 8000394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000396:	bc08      	pop	{r3}
 8000398:	469e      	mov	lr, r3
 800039a:	4770      	bx	lr
